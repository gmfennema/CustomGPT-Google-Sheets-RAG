openapi: "3.1.0"
info:
  title: "Google Sheets Data API"
  description: "API for managing and retrieving data from a Google Sheet"
  version: "v1.0.0"
servers:
  - url: "[YOUR GOOGLE SCRIPT WEB APP URL]"
paths:
  /exec?operation=getPeople:
    get:
      description: Get a list of all people's names
      operationId: getPeople
      parameters:
        - name: securityKey
          in: query
          description: Security key for authentication
          required: true
          schema:
            type: string
      deprecated: false
  /exec?operation=getPerson:
    get:
      description: Get a specific person's details
      operationId: getPerson
      parameters:
        - name: name
          in: query
          description: Name of the person to retrieve
          required: true
          schema:
            type: string
        - name: securityKey
          in: query
          description: Security key for authentication
          required: true
          schema:
            type: string
      deprecated: false
  /exec?operation=createProfile:
    post:
      description: Create a new person profile
      operationId: createProfile
      parameters:
        - name: name
          in: query
          description: Name of the person for whom the profile is being created
          required: true
          schema:
            type: string
        - name: securityKey
          in: query
          description: Security key for authentication
          required: true
          schema:
            type: string
      requestBody:
        description: Template for creating a new profile
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                template:
                  type: string
                  description: JSON template for the new person profile
      deprecated: false
  /exec?operation=updateProfile:
    post:
      description: Update a specific field in a person's profile
      operationId: updateProfile
      parameters:
        - name: name
          in: query
          description: Name of the person whose profile is to be updated
          required: true
          schema:
            type: string
        - name: securityKey
          in: query
          description: Security key for authentication
          required: true
          schema:
            type: string
      requestBody:
        description: Details for updating the person's profile
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                value:
                  type: string
                  description: New value for the profile update
                path:
                  type: string
                  description: Path to the field within the profile to be updated
                updateType:
                  type: string
                  description: Type of update (overwrite/append)
              required:
                - value
                - path
                - updateType
      deprecated: false
  /exec?operation=createEvent:
    post:
      description: Create a new event in Google Calendar
      operationId: createEvent
      parameters:
        - name: securityKey
          in: query
          description: Security key for authentication
          required: true
          schema:
            type: string
      requestBody:
        description: Request body for creating a new event
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: Title of the event
                startDateTime:
                  type: string
                  description: Start date and time in 'MMMM D, YYYY HH:mm:ss' format, e.g., 'January 1, 2024 20:00:00'
                endDateTime:
                  type: string
                  description: End date and time in 'MMMM D, YYYY HH:mm:ss' format, e.g., 'January 1, 2024 21:00:00'
                isAllDay:
                  type: boolean
                  description: Set to true for all-day events, false for specific time events
                description:
                  type: string
                  description: Description or details of the event (optional)
                invitees:
                  type: array
                  items:
                    type: string
                  description: Array of email addresses of invitees (optional)
              required:
                - title
                - startDateTime
                - endDateTime
      deprecated: false
  /exec?operation=viewEvents:
    post:
      description: See all events in a specified timeframe for your Google Calendar
      operationId: viewEvents
      parameters:
        - name: securityKey
          in: query
          description: Security key for authentication
          required: true
          schema:
            type: string
      requestBody:
        description: Request body for viewing events with start and end date filters
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                startDateTime:
                  type: string
                  description: Start datetime filter date and time in 'MMMM D, YYYY HH:mm:ss' format, e.g., 'January 1, 2024 20:00:00'
                endDateTime:
                  type: string
                  description: End datetime filter date and time in 'MMMM D, YYYY HH:mm:ss' format, e.g., 'January 1, 2024 21:00:00'
              required:
                - startDateTime
                - endDateTime
      deprecated: false
  /exec?operation=modifyEvent:
    post:
      description: Updates existing calendar events using an event ID
      operationId: modifyEvent
      parameters:
        - name: securityKey
          in: query
          description: Security key for authentication
          required: true
          schema:
            type: string
      requestBody:
        description: Request body for updating and existing event
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                eventId:
                  type: string
                  description: The ID of the event which can be found using the getEvents call
                title:
                  type: string
                  description: Title of the event (optional)
                startDateTime:
                  type: string
                  description: Updated the start date and time in 'MMMM D, YYYY HH:mm:ss' format, e.g., 'January 1, 2024 20:00:00' (if
                    modifying date/time, must include both new start and end times)
                endDateTime:
                  type: string
                  description: Updates the end date and time in 'MMMM D, YYYY HH:mm:ss' format, e.g., 'January 1, 2024 21:00:00' (if
                    modifying date/time, must include both new start and end times)
                isAllDay:
                  type: boolean
                  description: If true, updates event to be an all day event
                description:
                  type: string
                  description: Updates the description or details of the event (optional)
                deleteEvent:
                  type: boolean
                  description: If true, deletes the event (optional)
              required:
                - eventId
      deprecated: false
  /exec?operation=getEmails:
    post:
      description: Returns email information based on body filters
      operationId: getEmails
      parameters:
        - name: securityKey
          in: query
          description: Security key for authentication
          required: true
          schema:
            type: string
      requestBody:
        description: Filters which emails are returned in the response
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                minDate:
                  type: string
                  description: "How far back to look for emails formatted like: 'YYYY-MM-DD'"
                isUnread:
                  type: boolean
                  description: If true, will only return unread emails
                isInInbox:
                  type: boolean
                  descrition: If true, will only return emails currently in the user's inbox
              required:
                - minDate
      deprecated: false
  /exec?operation=updateEmails:
    post:
      description: Performs uodate actions on selected emails
      operationId: updateEmails
      parameters:
        - name: securityKey
          in: query
          description: Security key for authentication
          required: true
          schema:
            type: string
      requestBody:
        description: Filters which emails are returned in the response
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                emailIds:
                  type: array
                  items:
                    type: string
                    description: ID of emails to be updated
                markAsRead:
                  type: boolean
                  description: If true, will mark emails as read. If false, will mark emails as unread. If null, will not change read
                    status.
                archive:
                  type: boolean
                  descrition: If true, will archive emails
                moveToInbox:
                  type: boolean
                  descrition: If true, will move emails back to inbox
              required:
                - emailIds
      deprecated: false
  /exec?operation=draftReply:
    post:
      description: Creates a draft reply to an email
      operationId: draftReply
      parameters:
        - name: securityKey
          in: query
          description: Security key for authentication
          required: true
          schema:
            type: string
      requestBody:
        description: Relevent information for the draft response
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                emailId:
                  type: string
                  description: The ID of the email to create a response draft for
                draftContent:
                  type: string
                  description: The content of the drafted reply
                replyAll:
                  type: boolean
                  descrition: If true, will reply all, else will reply to the sender only
              required:
                - emailId
      deprecated: false
  /exec?operation=getEmailContext:
    post:
      description: Retrieves the email content for the entire email thread
      operationId: getEmailContext
      parameters:
        - name: securityKey
          in: query
          description: Security key for authentication
          required: true
          schema:
            type: string
      requestBody:
        description: Which email should be investigated
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                emailId:
                  type: string
                  description: The ID of the email get context for
              required:
                - emailId
      deprecated: false
components:
  schemas: {}